-- confgenerator.lua
-- Manages the /cookieSuite/conf.lua file by loading defaults from conf files

local CONFIG_DIR_MAIN = "/cookieSuite"
local CONFIG_FILE_PATH_MAIN = CONFIG_DIR_MAIN .. "/conf.lua"
local DEFAULTS_SOURCE_DIR = CONFIG_DIR_MAIN .. "/conf"
local CONFIG_LOG_DIR = CONFIG_DIR_MAIN .. "/log" -- Added log directory
local GLOBAL_CONF_FILENAME = "global.conf"
local GLOBAL_CONFIG_KEY = "global"
local DEBUG_LOG_FILE = CONFIG_DIR_MAIN .. "/confgen_debug.log" -- Keep in main dir for compatibility

-- Initialize debug log
local function logDebug(message)
    local file = fs.open(DEBUG_LOG_FILE, fs.exists(DEBUG_LOG_FILE) and "a" or "w")
    if file then
        file.writeLine("[" .. os.date("%H:%M:%S") .. "] " .. message)
        file.close()
    end
end

logDebug("Starting confgenerator.lua")

local function ensureConfigDir(path)
    logDebug("Ensuring directory exists: " .. path)
    if not fs.isDir(path) then
        fs.makeDir(path)
        logDebug("Created directory: " .. path)
        print("Created directory: " .. path)
    else
        logDebug("Directory already exists: " .. path)
    end
end

local function loadLuaFileAsTable(filePath)
    logDebug("Loading Lua file as table: " .. filePath)
    if fs.exists(filePath) then
        local func, err = loadfile(filePath)
        if func then
            local success, configTable = pcall(func)
            if success and type(configTable) == "table" then
                logDebug("Successfully loaded table from: " .. filePath)
                return configTable
            else
                local errMsg = "Error executing Lua file: " .. filePath
                if not success then errMsg = errMsg .. " - " .. tostring(configTable) end
                logDebug(errMsg)
                print(errMsg)
            end
        else
            local errMsg = "Error loading Lua file: " .. filePath .. " - " .. tostring(err)
            logDebug(errMsg)
            print(errMsg)
        end
    else
        logDebug("File not found: " .. filePath)
    end
    return nil -- Return nil if not found, error, or not a table
end

local function serializeValue(value)
    local t = type(value)
    if t == "string" then
        return string.format("%q", value)
    elseif t == "number" or t == "boolean" then
        return tostring(value)
    elseif t == "table" then
        -- Basic table serialization (not handling nested tables deeply or metatables)
        local parts = {}
        -- Check if it's an array-like table
        local isArray = true
        local maxIndex = 0
        for k, _ in pairs(value) do
            if type(k) ~= "number" or k < 1 or math.floor(k) ~= k then
                isArray = false
                break
            end
            maxIndex = math.max(maxIndex, k)
        end
        if #value ~= maxIndex then isArray = false end -- Check for holes if it looked like an array

        if isArray then
            for i = 1, #value do
                table.insert(parts, serializeValue(value[i]))
            end
            return "{ " .. table.concat(parts, ", ") .. " }"
        else -- Dictionary-like table
            for k, v in pairs(value) do
                local keyStr
                if type(k) == "string" and k:match("^[a-zA-Z_][a-zA-Z0-9_]*$") then
                    keyStr = k -- Simple identifier
                else
                    keyStr = "[" .. serializeValue(k) .. "]" -- Needs brackets
                end
                table.insert(parts, keyStr .. " = " .. serializeValue(v))
            end
            return "{ " .. table.concat(parts, ", ") .. " }"
        end
    else
        return "nil --[[ UNSUPPORTED TYPE: " .. t .. " ]]"
    end
end

local function saveConfig(configTable, filePath)
    logDebug("Saving configuration to: " .. filePath)
    local lines = {"-- CookieSuite Configuration File", "-- Generated by confgenerator.lua", "return {"}
    for scriptName, scriptConfig in pairs(configTable) do
        if type(scriptConfig) == "table" then -- Ensure it's a table
            table.insert(lines, string.format("  %s = {", scriptName))
            for key, value in pairs(scriptConfig) do
                table.insert(lines, string.format("    %s = %s,", key, serializeValue(value)))
            end
            table.insert(lines, "  },")
            logDebug("Added configuration section for: " .. scriptName)
        end
    end
    table.insert(lines, "}")

    local file, err = fs.open(filePath, "w")
    if file then
        file.write(table.concat(lines, "\n"))
        file.close()
        local msg = "Configuration saved to: " .. filePath
        logDebug(msg)
        print(msg)
        return true
    else
        local errMsg = "Error saving config file: " .. filePath
        if err then errMsg = errMsg .. " - " .. err end
        logDebug(errMsg)
        print(errMsg) 
        return false
    end
end

local function uploadLogToPastebin()
    if fs.exists(DEBUG_LOG_FILE) then
        logDebug("Attempting to upload debug log to Pastebin")
        print("Uploading debug log to Pastebin for diagnostics...")
        
        local success, result = shell.run("pastebin", "put", DEBUG_LOG_FILE)
        
        if success then
            local msg = "Debug log uploaded to: https://pastebin.com/" .. result
            logDebug(msg)
            print(msg)
            print("Please share this URL when requesting help.")
        else
            logDebug("Failed to upload debug log to Pastebin")
            print("Failed to upload debug log. Please use 'cookie paste " .. DEBUG_LOG_FILE .. "' manually.")
        end
    else
        print("No debug log file found.")
    end
end

-- Main logic - always ensure all required directories
logDebug("Ensuring all config directories exist")
ensureConfigDir(CONFIG_DIR_MAIN) -- Ensure /cookieSuite exists
ensureConfigDir(DEFAULTS_SOURCE_DIR) -- Ensure /cookieSuite/conf exists 
ensureConfigDir(CONFIG_LOG_DIR) -- Ensure /cookieSuite/log exists

local currentMainConfig = loadLuaFileAsTable(CONFIG_FILE_PATH_MAIN) or {}
local configChanged = false

logDebug("Processing configurations from " .. DEFAULTS_SOURCE_DIR .. "/")
print("Processing configurations from " .. DEFAULTS_SOURCE_DIR .. "/ ...")

if not fs.isDir(DEFAULTS_SOURCE_DIR) then
    local msg = "Warning: Defaults source directory '" .. DEFAULTS_SOURCE_DIR .. "/' not found."
    logDebug(msg)
    print(msg)
    print("Creating it now...")
    ensureConfigDir(DEFAULTS_SOURCE_DIR)
    logDebug("No configuration files exist yet. Use 'cookie config <scriptname>' to fetch them.")
    print("No configuration files exist yet. Use 'cookie config <scriptname>' to fetch them.")
else
    local files = fs.list(DEFAULTS_SOURCE_DIR)
    logDebug("Found " .. #files .. " files in " .. DEFAULTS_SOURCE_DIR)
    
    -- Step 1: Process global.conf first
    local globalConfFilePath = DEFAULTS_SOURCE_DIR .. "/" .. GLOBAL_CONF_FILENAME
    logDebug("Checking for global config: " .. globalConfFilePath)
    if fs.exists(globalConfFilePath) then
        logDebug("Global config exists")
        if not currentMainConfig[GLOBAL_CONFIG_KEY] then
            logDebug("Global config section doesn't exist in main config, loading from file")
            print("Found global default config: " .. globalConfFilePath)
            local globalDefaultConfig = loadLuaFileAsTable(globalConfFilePath)
            if globalDefaultConfig then
                logDebug("Successfully loaded global config data")
                print("Adding default global config.")
                currentMainConfig[GLOBAL_CONFIG_KEY] = globalDefaultConfig
                configChanged = true
            else
                logDebug("Failed to load global config data")
                print("Could not load or parse default global config from: " .. globalConfFilePath)
            end
        else
            logDebug("Global config section already exists in main config")
            print("Main config already has a '" .. GLOBAL_CONFIG_KEY .. "' section. Skipping default from " .. GLOBAL_CONF_FILENAME)
        end
    else
        logDebug("Global config file not found")
        print("Global default config file not found: " .. globalConfFilePath)
    end

    -- Step 2: Process other script-specific .conf files
    logDebug("Processing script-specific .conf files")
    local defaultConfFiles = fs.list(DEFAULTS_SOURCE_DIR)
    for _, confFilenameWithExt in ipairs(defaultConfFiles) do
        logDebug("Examining file: " .. confFilenameWithExt)
        if confFilenameWithExt ~= GLOBAL_CONF_FILENAME and confFilenameWithExt:sub(-5) == ".conf" then -- e.g., worm.conf
            local scriptName = confFilenameWithExt:sub(1, -6) -- Extract "worm" from "worm.conf"
            local scriptDefaultConfFilePath = DEFAULTS_SOURCE_DIR .. "/" .. confFilenameWithExt
            logDebug("Processing conf file for script: " .. scriptName)

            if not currentMainConfig[scriptName] then
                logDebug("Script " .. scriptName .. " not yet in main config")
                print("Found new script default config: " .. scriptDefaultConfFilePath .. " for script '" .. scriptName .. "'")
                local scriptDefaultConfig = loadLuaFileAsTable(scriptDefaultConfFilePath)
                if scriptDefaultConfig then
                    logDebug("Successfully loaded config for: " .. scriptName)
                    print("Adding default config for: " .. scriptName)
                    currentMainConfig[scriptName] = scriptDefaultConfig
                    configChanged = true
                else
                    logDebug("Failed to load config for: " .. scriptName)
                    print("Could not load or parse default config from: " .. scriptDefaultConfFilePath)
                end
            else
                logDebug("Script " .. scriptName .. " already in main config, skipping")
                print("Main config for '" .. scriptName .. "' already exists. Skipping default from " .. confFilenameWithExt)
            end
        end
    end
end

if configChanged then
    logDebug("Config changed, saving to " .. CONFIG_FILE_PATH_MAIN)
    local saveSuccess = saveConfig(currentMainConfig, CONFIG_FILE_PATH_MAIN)
    if not saveSuccess then
        logDebug("Failed to save configuration!")
        print("CRITICAL ERROR: Failed to save configuration!")
        uploadLogToPastebin() -- Try to upload debug log for diagnostics
        return 1 -- Error exit code
    end
else
    logDebug("No configuration changes needed")
    print("No configuration changes needed for main config file.")
end

logDebug("Configuration generation finished successfully")
print("Configuration generation finished successfully.")
-- Add this at the end to show the debug log path
print("Debug log written to: " .. DEBUG_LOG_FILE)
print("To view/share all logs, run: cookie log")
return 0 -- Success exit code

