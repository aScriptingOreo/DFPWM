-- confgenerator.lua
-- Manages the /cookieSuite/conf.lua file by loading defaults from conf files

local CONFIG_DIR_MAIN = "/cookieSuite"
local CONFIG_FILE_PATH_MAIN = CONFIG_DIR_MAIN .. "/conf.lua"
-- Change this to use /cookieSuite/conf/ directory instead of local conf/
local DEFAULTS_SOURCE_DIR = CONFIG_DIR_MAIN .. "/conf" 
local GLOBAL_CONF_FILENAME = "global.conf"
local GLOBAL_CONFIG_KEY = "global" -- Key used in the main conf.lua for global settings

local function ensureConfigDir(path)
    if not fs.isDir(path) then
        fs.makeDir(path)
        print("Created directory: " .. path)
    end
end

local function loadLuaFileAsTable(filePath)
    if fs.exists(filePath) then
        local func, err = loadfile(filePath)
        if func then
            local success, configTable = pcall(func)
            if success and type(configTable) == "table" then
                return configTable
            else
                print("Error executing Lua file: " .. filePath)
                if not success then print("  Reason: " .. tostring(configTable)) end
            end
        else
            print("Error loading Lua file: " .. filePath)
            if err then print("  Reason: " .. err) end
        end
    end
    return nil -- Return nil if not found, error, or not a table
end

local function serializeValue(value)
    local t = type(value)
    if t == "string" then
        return string.format("%q", value)
    elseif t == "number" or t == "boolean" then
        return tostring(value)
    elseif t == "table" then
        -- Basic table serialization (not handling nested tables deeply or metatables)
        local parts = {}
        -- Check if it's an array-like table
        local isArray = true
        local maxIndex = 0
        for k, _ in pairs(value) do
            if type(k) ~= "number" or k < 1 or math.floor(k) ~= k then
                isArray = false
                break
            end
            maxIndex = math.max(maxIndex, k)
        end
        if #value ~= maxIndex then isArray = false end -- Check for holes if it looked like an array

        if isArray then
            for i = 1, #value do
                table.insert(parts, serializeValue(value[i]))
            end
            return "{ " .. table.concat(parts, ", ") .. " }"
        else -- Dictionary-like table
            for k, v in pairs(value) do
                local keyStr
                if type(k) == "string" and k:match("^[a-zA-Z_][a-zA-Z0-9_]*$") then
                    keyStr = k -- Simple identifier
                else
                    keyStr = "[" .. serializeValue(k) .. "]" -- Needs brackets
                end
                table.insert(parts, keyStr .. " = " .. serializeValue(v))
            end
            return "{ " .. table.concat(parts, ", ") .. " }"
        end
    else
        return "nil --[[ UNSUPPORTED TYPE: " .. t .. " ]]"
    end
end

local function saveConfig(configTable, filePath)
    local lines = {"-- CookieSuite Configuration File", "-- Generated by confgenerator.lua", "return {"}
    for scriptName, scriptConfig in pairs(configTable) do
        if type(scriptConfig) == "table" then -- Ensure it's a table
            table.insert(lines, string.format("  %s = {", scriptName))
            for key, value in pairs(scriptConfig) do
                table.insert(lines, string.format("    %s = %s,", key, serializeValue(value)))
            end
            table.insert(lines, "  },")
        end
    end
    table.insert(lines, "}")

    local file, err = fs.open(filePath, "w")
    if file then
        file.write(table.concat(lines, "\n"))
        file.close()
        print("Configuration saved to: " .. filePath)
    else
        print("Error saving config file: " .. filePath)
        if err then print("  Reason: " .. err) end
    end
end

-- Main logic
ensureConfigDir(CONFIG_DIR_MAIN) -- Ensure /cookieSuite exists
ensureConfigDir(DEFAULTS_SOURCE_DIR) -- Ensure /cookieSuite/conf exists 

local currentMainConfig = loadLuaFileAsTable(CONFIG_FILE_PATH_MAIN) or {}
local configChanged = false

print("Processing configurations from " .. DEFAULTS_SOURCE_DIR .. "/ ...")
if not fs.isDir(DEFAULTS_SOURCE_DIR) then
    print("Warning: Defaults source directory '" .. DEFAULTS_SOURCE_DIR .. "/' not found. No new defaults will be added.")
else
    -- Step 1: Process global.conf first
    local globalConfFilePath = DEFAULTS_SOURCE_DIR .. "/" .. GLOBAL_CONF_FILENAME
    if fs.exists(globalConfFilePath) then
        if not currentMainConfig[GLOBAL_CONFIG_KEY] then
            print("Found global default config: " .. globalConfFilePath)
            local globalDefaultConfig = loadLuaFileAsTable(globalConfFilePath)
            if globalDefaultConfig then
                print("Adding default global config.")
                currentMainConfig[GLOBAL_CONFIG_KEY] = globalDefaultConfig
                configChanged = true
            else
                print("Could not load or parse default global config from: " .. globalConfFilePath)
            end
        else
            print("Main config already has a '" .. GLOBAL_CONFIG_KEY .. "' section. Skipping default from " .. GLOBAL_CONF_FILENAME)
        end
    else
        print("Global default config file not found: " .. globalConfFilePath)
    end

    -- Step 2: Process other script-specific .conf files
    local defaultConfFiles = fs.list(DEFAULTS_SOURCE_DIR)
    for _, confFilenameWithExt in ipairs(defaultConfFiles) do
        if confFilenameWithExt ~= GLOBAL_CONF_FILENAME and confFilenameWithExt:sub(-5) == ".conf" then -- e.g., worm.conf
            local scriptName = confFilenameWithExt:sub(1, -6) -- Extract "worm" from "worm.conf"
            local scriptDefaultConfFilePath = DEFAULTS_SOURCE_DIR .. "/" .. confFilenameWithExt

            if not currentMainConfig[scriptName] then
                print("Found new script default config: " .. scriptDefaultConfFilePath .. " for script '" .. scriptName .. "'")
                local scriptDefaultConfig = loadLuaFileAsTable(scriptDefaultConfFilePath)
                if scriptDefaultConfig then
                    print("Adding default config for: " .. scriptName)
                    currentMainConfig[scriptName] = scriptDefaultConfig
                    configChanged = true
                else
                    print("Could not load or parse default config from: " .. scriptDefaultConfFilePath)
                end
            else
                print("Main config for '" .. scriptName .. "' already exists. Skipping default from " .. confFilenameWithExt)
            end
        end
    end
end

if configChanged then
    saveConfig(currentMainConfig, CONFIG_FILE_PATH_MAIN)
else
    print("No configuration changes needed for main config file.")
end

print("Configuration generation finished.")

